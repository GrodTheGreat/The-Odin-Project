* {
  margin: 0;
  padding: 0;
}

.container {
  text-align: center;
}

.container div {
  padding: 15px;
  font-size: 32px;
  font-family: Helvetica;
  font-weight: bold;
  color: white;
}

.header {
  background-color: #393f4d;
}

.menu ul,
.menu li {
  font-size: 16px;
}

.sidebar {
  background-color: #C50208;
}

.sidebar .photo {
  background-color: white;
  color: black;
  font-size: 12px;
  font-weight: normal;
  border-radius: 10px;
}


.sidebar .side-content {
  background-color: white;
  color: black;
  font-size: 16px;
  font-weight: normal;
}

.nav {
  background-color: #C50208;
}

.nav ul li {
  font-size: 16px;
  text-transform: uppercase;
}

.article {
  background-color: #bccbde;
}

.article p {
  font-size: 18px;
  font-family: sans-serif;
  color: white;
  text-align: left;
}

.article .card {
  background-color: #FFFFFF;
  color: black;
  text-align: center;
}

.card p {
  color: black;
  font-weight: normal;
  font-size: 14px;
}

.card .title {
  font-size: 18px;
  text-align: center;
}

.footer {
  background-color: #393f4d;
}

.footer p {
  font-size: 13px;
  font-weight: normal;
}

/* Shouldn't normally do this, but for this exercise I'm having my code down
here */
/* 
Hints/Restrictions:
For this exercise you will need to add some CSS declaration blocks to the
style.css file. Look through the HTML to see what selectors and combinators you
can use.
Take the layout one section at a time.
You don't need to add or change anything to the HTML, but it will be helpful to
look through the parent and child relationships between elements.
Just like with Flexbox, you can easily center an item by making it into a grid.
Don't worry about the placeholder image element stretching when resizing the
browser window. This will be covered in the Responsive lessons.
*/
.container {
  display: grid;
  /* The container element has two columns, The container's second column is 4
  times larger than the first column */
  grid-template-columns: 1fr 4fr;
  grid-template-rows: 100px 50px 1fr 45px;
  /* The container element has a gap of 4px */
  gap: 4px;
}

.header {
  display: grid;
  /* The header element has two columns */
  grid-template-columns: 1fr 1fr;
}

.logo {
  justify-self: start;
}

.menu > ul {
  /* The ul inside the menu element contains another grid */
  display: grid;
  grid-template-columns: repeat(4, 1fr);
}

.nav > ul {
  /* The ul inside the nav element contains another grid */
  display: grid;
  grid-template-columns: repeat(3, 1fr);
}

.sidebar {
  display: grid;
  grid-template-rows: repeat(4, 1fr);
  justify-items: stretch;
  /* The sidebar element has a gap of 50px */
  gap: 50px;
  /* The sidebar only spans across the first column */
  grid-column: 1;
  grid-row: 2 / span 2;
}

/* The text elements in the sidebar are centered with grid */
.sidebar > .side-content, .sidebar > .photo {
  display: grid;
  justify-content: center;
  align-content: center;
}

.article {
  display: grid;
  /* The article element should set grid columns using repeat along with the
  auto-fit and minmax properties, The article columns should have a minimum
  value of 250px and a maximum of 1fr unit */
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  /* The article element has a gap of 15px */
  gap: 15px;
}

.article .card {
  /* The card elements inside the article container have a height of 200px */
  height: 200px;
}

.header, .footer {
  /* The header and footer span across both columns */
  grid-column: 1 / -1;
}

.nav, .article {
  /* The nav and article elements only span across the second column */
  grid-column: 2;
}

ul {
  list-style: none;
}